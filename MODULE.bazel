module(name = "guis-in-c")

bazel_dep(name = "glib", version = "2.82.2.bcr.5")
bazel_dep(name = "rules_nixpkgs_core", version = "0.13.0")

nix_repo = use_extension("@rules_nixpkgs_core//extensions:repository.bzl", "nix_repo")
nix_repo.file(
    name = "nixpkgs",
    file = "//:nixpkgs.nix",
    file_deps = [
        "//:flake.lock",
    ],
)
use_repo(nix_repo, "nixpkgs")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_cc", version = "0.1.1")
# Check this out: https://github.com/tweag/rules_nixpkgs/blob/329ca7c9479fb44176e5b5523fe0ecc12e5ff196/testing/core/MODULE.bazel#L23

nix_pkg = use_extension("@rules_nixpkgs_core//extensions:package.bzl", "nix_pkg")
nix_pkg.expr(
    name = "gtk4",
    attr = "",
    build_file_content = """
cc_library(
    name = "gtk4",
    srcs = glob(["lib/*.so*"]),
    hdrs = glob(["include/gtk-4.0/**/*.h"]),
    includes = ["include"],
    strip_include_prefix = "include/gtk-4.0",
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "gtk4"; paths = with pkgs; [ gtk4 gtk4.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "gtk4")

nix_pkg.expr(
    name = "boost",
    attr = "",
    build_file_content = """
cc_library(
    name = "boost",
    srcs = glob(["lib/*.so*"]),
    hdrs = glob(["include/boost/**/*.h", "include/boost/**/*.hpp", "include/boost/**/*.ipp"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "boost"; paths = with pkgs; [ boost boost.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "boost")

nix_pkg.expr(
    name = "cairo",
    attr = "",
    build_file_content = """
cc_library(
    name = "cairo",
    srcs = glob(["lib/*.so*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    strip_include_prefix = "include/cairo",
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "cairo"; paths = with pkgs; [ cairo cairo.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "cairo")

nix_pkg.expr(
    name = "pango",
    attr = "",
    build_file_content = """
cc_library(
    name = "pango",
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    strip_include_prefix = "include/pango-1.0",
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "pango"; paths = with pkgs; [ pango pango.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "pango")

nix_pkg.expr(
    name = "harfbuzz",
    attr = "",
    build_file_content = """
cc_library(
    name = "harfbuzz",
    srcs = glob(["lib/*.so*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    strip_include_prefix = "include/harfbuzz",
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "harfbuzz"; paths = with pkgs; [ harfbuzz harfbuzz.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "harfbuzz")

nix_pkg.expr(
    name = "gdk-pixbuf",
    attr = "",
    build_file_content = """
cc_library(
    name = "gdk-pixbuf",
    srcs = glob(["lib/*.so*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    strip_include_prefix = "include/gdk-pixbuf-2.0",
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "gdk-pixbuf"; paths = with pkgs; [ gdk-pixbuf gdk-pixbuf.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "gdk-pixbuf")

nix_pkg.expr(
    name = "graphene",
    attr = "",
    build_file_content = """
cc_library(
    name = "graphene",
    srcs = glob(["lib/*.so*", "lib/graphene-1.0/include/graphene-config.h"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include", "lib/graphene-1.0/include"],
    strip_include_prefix = "include/graphene-1.0",
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "graphene"; paths = with pkgs; [ graphene graphene.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "graphene")

# nix_pkg.expr(
#     name = "glib",
#     attr = "",
#     build_file_content = """
# cc_library(
#     name = "glib",
#     srcs = glob(["lib/*.so.*"], exclude = ["lib/*.py"]),
#     hdrs = glob(["include/**/*.h"]),
#     includes = ["include"],
#     visibility = ["//visibility:public"],
# )
# """,
#     expr = """
# let pkgs = import <nixpkgs> {}; in
# pkgs.symlinkJoin { name = "glib"; paths = with pkgs; [ glib glib.dev glib.out ]; }""",
#     repo = "@nixpkgs",
# )
# use_repo(nix_pkg, "glib")

nix_pkg.expr(
    name = "zlib",
    attr = "",
    build_file_content = """
cc_library(
    name = "zlib",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "zlib"; paths = with pkgs; [ zlib zlib.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "zlib")

nix_pkg.expr(
    name = "dbus",
    attr = "",
    build_file_content = """
cc_library(
    name = "dbus",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "dbus"; paths = with pkgs; [ dbus dbus.lib ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "dbus")

nix_pkg.expr(
    name = "libglvnd",
    attr = "",
    build_file_content = """
cc_library(
    name = "libglvnd",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "libglvnd"; paths = with pkgs; [ libglvnd libglvnd.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "libglvnd")

nix_pkg.expr(
    name = "egl-wayland",
    attr = "",
    build_file_content = """
cc_library(
    name = "egl-wayland",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "egl-wayland"; paths = with pkgs; [ egl-wayland egl-wayland.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "egl-wayland")

nix_pkg.expr(
    name = "fontconfig",
    attr = "",
    build_file_content = """
cc_library(
    name = "fontconfig",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "fontconfig"; paths = with pkgs; [ fontconfig fontconfig.lib ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "fontconfig")

nix_pkg.expr(
    name = "libxkbcommon",
    attr = "",
    build_file_content = """
cc_library(
    name = "libxkbcommon",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "libxkbcommon"; paths = with pkgs; [ libxkbcommon ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "libxkbcommon")

# SDL3 GUI
nix_pkg.expr(
    name = "sdl3",
    attr = "",
    build_file_content = """
cc_library(
    name = "sdl3",
    srcs = glob(["lib/*.so.*"]),
    hdrs = glob(["include/**/*.h"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    expr = """
let pkgs = import <nixpkgs> {}; in
pkgs.symlinkJoin { name = "sdl3"; paths = with pkgs; [ sdl3 sdl3.dev ]; }""",
    repo = "@nixpkgs",
)
use_repo(nix_pkg, "sdl3")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)
# bazel run @hedron_compile_commands//:refresh_all

# Look at this: https://github.com/tweag/rules_nixpkgs/blob/a425ed7865b769c5508507ac8b3817feebe3eed7/testing/core/MODULE.bazel#L50
# https://github.com/egen/disruptor/blob/aec36d22cf53bf8f941d84b82cf5e0f43b01c02b/projects/bzl7/MODULE.bazel#L5

bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_qt")
git_override(
    module_name = "rules_qt",
    commit = "f43d76ab1d3b60bd494e871f4f1042a351bfcff8",
    remote = "https://github.com/Vertexwahn/rules_qt6.git",
)

qt = use_extension("@rules_qt//:extensions.bzl", "qt")
qt.fetch()
use_repo(
    qt,
    "qt_linux_x86_64",
)

register_toolchains(
    "@rules_qt//tools:all",
    dev_dependency = True,
)

# TODO(@waflores) 2025-06-03: Figure out how to register clang/gcc properly in the repo
